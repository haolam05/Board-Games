q
display @considered_positions
display @start_pos
c
display @start_pos
display @considered_positions
c
q
display @considered_positions
display @start_pos
display start_pos
q
c
display start_pos
display @considered_positions
q
display @considered_positions
s
q
@considered_positions.include?(move)
@considered_positions
move
n
s
n
s
n
s
c
n
s
n
c
s
c
y
q
root
path
s
n
display path
s
q
path
n
q
move[1]+pos[1]
move[0]+pos[0]
move
[pos[0] + move[0], pos[1] + move[1]].all? { |move| move.between?(0,7) }
s
[pos[0] + move[0], pos[1] + move[1]].all? { |move| move.between?(0,7) }
s
[pos[0] + move[0], pos[1] + move[1]].all? { |move| move.between?(0,7) }
move[0] + move[1]
move
s
c
q
move
knight_moving_type
move
s
n
s
c
q
[x+move[0],y+move[y]].all? {|move| move.between?(0,7)}
move[1]+y
move[0]
move[x]
move
s
n
s
c
[move[0] + x,move[1]+y].all? {|i| i.between?(0,7)  }exit
[move[0] + x,move[1]+y].all? {|i| i.between?(0,7)  }
[move[0] + x,move[1]+y]
move[0] + x
x
move[0]
move
s
c
self.knight_moving_type
knight_moving_type
c
q
new_parent
parent.children
new_parent.children
self
n
s
n
s
n
pos
s
self
n
self
@parent
n
self
s
n
s
q
exit
self
@parent
new_parent
n
s
n
s
n
pos
s
n
s
n
s
d
n
s
n
@parent
s
@root
pos
n
pos
@parent
n
@parent
new_parent
@parent
n
@parent
s
@parent
n
@parent
@value
s
n
@root
root
n
s
exit
pos
@root.add_child(PolyTreeNode.new(pos))
@root
n
s
n
exit
s
queue
@root
n
@root
n
pos
n
pos
n
pos
n
s
n
display queue
queue.shift
queue
n
queue
n
queue
@root
n
queue.shift
n
queue
n
display @root
displaye @root
exit
c
n
display @root
display queue
n
queue
n
queue
n
