q
c
cc
c
cc
c
cc
c
cc
c
cc
c
ccc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
display board.solved?
display board.render
q
find_block([x,y]).all? { |pos| @board[pos] != num }
find_block([x,y])
block_is_safe
e
block_is_saf
n
block
s
vertical_is_safe
n
num
horizontal_is_safe
n
s
safe?(pos, num)
c
display pos
pos
c
pos
c
display board.solved?
display board.render
q
pos
c
pos
c
pos
c
pos
c
pos
safe?(pos, num)
c
display board.solved?
display board.render
q
display board.render
c
pos
n
safe?(pos,num)
c
display board.solved?
board.render
display board.solved?
q
board.render
unchoose([0,1])
c
n
pos
num
n
safe?(pos, num)
c
display board.solved?
display board.render
q
wy
c
q
self.is_a?(Board)
self.is_a?(Game)
self.is_a?(ComputerSolver)
system('clear')
self
q
board.render
@board[[0,8]] = 0
board.render
unchoose([0,8])
n
pos
n
w
cq
c
display board.render
q
cq
q
c
q
c
q
c
pos
n
pos
s
board.render
n
safe?(pos, num)
board.legal_positions.each
n
s
n
board.render
s
display board.render
display boar.render
n
board.render
n
board.render
n
s
n
q
c
y
q
y
q
c
board.render
n
num
safe?(pos, num)
n
s
n
c
display board.solved?
display board.render
q
n
s
n
c
display board.solved?
display board.render
q
c
display board.solved?
display board.render
q
qy
y
c
y
q
c
display board.solved?
display board.render
display board.solved?
c
cc
c
display board.solved?
display board.render
display board.solved?
q
c
q
c
q
n
pos
s
pos
n
legal_pos
n
s
n
legal_pos
n
pos
s
pos
n
s
n
board.solved?
c
cc
c
cc
c
cc
c
display board.solved?
display board.render
c
n
board.solved?
c
display board.solved?
cc
c
display board.render
display board.solved?
c
display board.solved?
display board.render
c
q
c
cc
c
cc
c
display pos
c
cc
c
cc
c
display pos
c
q
self[[i,j]]
j
s
j
s
