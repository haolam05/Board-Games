q
known_cards[i]
known_cards[i].value
display i
j
i
display get_value(j)
display get_value(i)
sA
display get_value(i)
display get_value(j)
i
s
n
s
n
c
n
display known_idx
display known_cards
c
s
n
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
n
m
n
display i
i
c
q
n
count_matches.length == @matches
n
get_value(0)
get_value(1)
j
get_value(j) == get_value(i)
n
display count_matches
display get_value(i)
display get_value(j)
get_value(j)
get_value(j) == get_value(i)
s
n
display known_idx
display known_cards
s
n
s
n
s
c
n
s
display known_cards
display known_idx
n
s
n
s
c
n
s
n
s
n
s
c
n
display known_idx
display @known_cards
n
s
n
s
c
q
@known_idx
q
number_of_bombs
n
number_of_characters_needed
n
@board
c
q
 @cards.length
s
display @guess_pos
q
@guess_pos
@guessed_pos
n
current_guess_pos
s
@gussed_pos
c
@guessed_pos
q
@guessed_pos[i]
@guessed_pos
@cards
n
@cards
s
n
@cards
s
c
q
@cards
s
@cards
n
s
q
cards
update_cards
@cards
cards
n
@cards
s
cards_are_not_matched
q
@cards
pos
@board[current_guess_pos]
@board[pos]
@cards.all? { |pos| @board[pos] == @board[current_guess_pos] }
s
pos
current_guess_pos
@cards.all? { |pos| @board[pos] == @board[current_guess_pos] }
s
n
c
q
@board
n
@board
q
total_spots_available_on_board / matches
@board
n
s
c
q
total_spots_available_on_board / 2 / matches
 total_spots_available_on_board
total_spots_available_on_board / 2 / matches
n
matches
difficult
s
q
@board
n
difficult
s
c
n
s
@board
q
self
@board
n
@board
s
@board
n
@board
n
@board
q
@board
@cards
cáº£ds
c
q
card.value
card
s
card
value
q
n
nn
n
display self[pos]
n
s
c
s
n
